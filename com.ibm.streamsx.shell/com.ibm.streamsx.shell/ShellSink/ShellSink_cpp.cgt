<%

# Copyright (C) 2016  International Business Machines Corporation
# All Rights Reserved

use strict;
use warnings;

unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . "/../impl/bin";
require CodeGenX;

# get Perl objects for the operator's input and output ports

my $inputPort = $model->getInputPortAt(0);
my $outputPort0 = $model->getNumberOfOutputPorts()>0 ? $model->getOutputPortAt(0) : undef;

# get C++ expressions to get the values of the operator's parameters

my $command = $model->getParameterByName("command")->getValueAt(0)->getCppExpression();
my $stdinAttributeGetter = $model->getParameterByName("stdinAttribute") ? $model->getParameterByName("stdinAttribute")->getValueAt(0)->getCppExpression() : undef;
my $stderrAttributeName = $model->getParameterByName("stderrAttribute") ? $model->getParameterByName("stderrAttribute")->getValueAt(0)->getSPLExpression() : undef;

# who would put quotes around a literal constant?

$stderrAttributeName =~ s/^\"|\"$//g if $stderrAttributeName;

# basic safety checks

SPL::CodeGen::exitln("sorry, 'stderrAttributeName' parameter cannot be specified without an output port") if $stderrAttributeName && !$outputPort0;

# get attribute for input and output lines

if (!$stdinAttributeGetter) {
   foreach my $attribute ( @{ $inputPort->getAttributes() } ) {
       $stdinAttributeGetter = "iport\$0.get_" . $attribute->getName() . "()", last if $attribute->getSPLType() eq "rstring"; }
   SPL::CodeGen::exitln("sorry, no attribute of type 'rstring' found for input port") unless $stdinAttributeGetter;
}

my $stderrAttribute;
if ($outputPort0) {
    foreach my $attribute ( @{ $outputPort0->getAttributes() } ) {
        $stderrAttribute = $attribute if $stderrAttributeName && $attribute->getName() eq $stderrAttributeName;
        $stderrAttribute = $attribute if !$stderrAttributeName && $attribute->getSPLType() eq "rstring";
        last if $stderrAttribute; }
    if (!$stderrAttribute) {
        SPL::CodeGen::exitln("sorry, no attribute of " . ($stderrAttributeName ? "name '$stderrAttributeName'" : "type 'rstring'") . " found for output port"); }
}

%>


#include <sys/time.h>
#include <time.h>
#include <float.h>
#include <string>

<%SPL::CodeGen::implementationPrologue($model);%>



// calls to SPL functions within expressions are generated with this
// namespace, which must be mapped to the operator's namespace so they
// will invoke the assignment functions defined in the ShellSink_h.cgt file

#define ShellSink MY_OPERATOR

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink constructor ...", "ShellSink");

    // initialize operator state variables
    drained_ = false;
    linecounters.resize(3);
    for (int i=0; i<linecounters.size(); i++) linecounters[i] = 0;

    // store operator parameters
    commandline = <%=$command%>;

    // clear tuples
    inputTuple.clear();
    <% if ($outputPort0) { %> outputTuple0.clear(); <% } %>

    // start the command in a shell
    SPLAPPTRC(L_INFO, "starting shell command '" << commandline << "'", "ShellSink");
    try { shell_.setup(commandline); }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_ERROR, "sorry, could not execute shell command '" << commandline << "', reason='" << shell_.getTermInfoExplanation() << "', exitcode=" << shell_.getTermInfoExitCode(), "ShellSink");
        throw;
    }

    SPLAPPTRC(L_TRACE, "leaving ShellSink constructor ...", "ShellSink");
}


// Destructor
MY_OPERATOR::~MY_OPERATOR()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink destructor ...", "ShellSink");
    SPLAPPTRC(L_TRACE, "leaving ShellSink destructor ...", "ShellSink");
}


// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink allPortsReady() ...", "ShellSink");

    // start a thread for the STDOUT&STDERR read loop below
    createThreads(1);

    SPLAPPTRC(L_TRACE, "leaving ShellSink allPortsReady() ...", "ShellSink");
}


// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink prepareToShutdown() ...", "ShellSink");

    shell_.shutdown(false);

    SPLAPPTRC(L_TRACE, "leaving ShellSink prepareToShutdown() ...", "ShellSink");
}


// Processing for thread that reads STDOUT&STDERR from shell
void MY_OPERATOR::process(uint32_t idx)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << idx << ") ...", "ShellSink");

    // discard lines written by the shell to STDOUT, maybe forward lines written to STDIN
    try {
        while (!getPE().getShutdownRequested()) {

            // wait for the next STDOUT and/or STDERR line from the shell
            int rc = shell_.readLine(stdoutline, stderrline);
            if (rc<0) break;

            // address the most recently received input tuple
            IPort0Type const & iport$0 = (IPort0Type const &)inputTuple;

            // count and discard lines the shell writes to STDOUT
            if (rc&1) {
                linecounters[1]++;
            }

            // maybe forward lines the shell writes to STDERR
            if (rc&2) {
                <% if ($outputPort0) { %>
                <% CodeGenX::copyOutputAttributesFromInputAttributes("outputTuple0", $outputPort0, $inputPort); %> ;
                <% CodeGenX::assignOutputAttributeValues("outputTuple0", $outputPort0); %> ;
                <% print "outputTuple0.set_" . $stderrAttribute->getName() . "(stderrline); // assign STDERR line" if $stderrAttribute && !$stderrAttribute->hasAssignment(); %>
                SPLLOG(L_TRACE, "submitting outputTuple0 " << outputTuple0, "ShellSink");
                submit(outputTuple0, 0);
                <% } %>
                linecounters[2]++;
            }
        } }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_TRACE, "shell terminated, reason='" << shell_.getTermInfoExplanation() << "', exitcode=" << shell_.getTermInfoExitCode(), "ShellSink");
    }

    {
        AutoMutex am(drainMutex_);
        drainCV_.signal();
        drained_ = true;
    }

    // wait for shell to exit, and get its exit code
    shell_.terminate();
    exitcode = shell_.getTermInfoExitCode();
    exitreason = shell_.getTermInfoExplanation();

    SPLAPPTRC(L_INFO, "finished shell command '" << commandline <<  "', reason='" << exitreason << "', exitcode=" << exitcode, "ShellSink");
    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << idx << ") ...", "ShellSink");
}


// Tuple processing for mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}


// process(tuple) method for operator with an input port,
// executes on upstream operator's thread
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << tuple << "," << port << ") ...", "ShellSink");

    AutoPortMutex apm(mutex_, *this);

    // save a copy of the input tuple for copying input attributes to output tuples
    inputTuple = (IPort0Type)tuple;
    SPLAPPTRC(L_TRACE, "received input tuple " << inputTuple, "ShellSink");

    IPort0Type const & iport$0 = static_cast<IPort0Type const &>(tuple);
    stdinline = <%=$stdinAttributeGetter%>;
    try { shell_.writeLine(stdinline); }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_ERROR, "sorry, could not write to stdin: " << e.what(), "ShellSink");
        throw;
    }
    linecounters[0]++;

    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << tuple << "," << port << ") ...", "ShellSink");
}


// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << punct << "," << port << ") ...", "ShellSink");

    AutoPortMutex apm(mutex_, *this);
    if (punct==Punctuation::FinalMarker) {
        shell_.shutdown(false);
        AutoMutex am(drainMutex_);
        while(!drained_) drainCV_.wait(drainMutex_);
        forwardWindowPunctuation(Punctuation::WindowMarker);
        forwardWindowPunctuation(Punctuation::FinalMarker);
    }

    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << punct << "," << port << ") ...", "ShellSink");
}



<%SPL::CodeGen::implementationEpilogue($model);%>
