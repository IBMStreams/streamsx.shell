<%

# Copyright (C) 2016  International Business Machines Corporation
# All Rights Reserved

use strict;
use warnings;

# get Perl objects for the operator's input and output ports

my $inputPort = $model->getNumberOfInputPorts()>0 ? $model->getInputPortAt(0) : undef;

# get C++ expressions to get the values of the operator's parameters

my $command = $model->getParameterByName("command")->getValueAt(0)->getCppExpression();
my $stdinAttribute = $model->getParameterByName("stdinAttribute") ? $model->getParameterByName("stdinAttribute")->getValueAt(0)->getCppExpression() : undef;

# get attribute for input line

if (!$stdinAttribute) {
   foreach my $attribute ( @{ $inputPort->getAttributes() } ) {
       $stdinAttribute = "iport\$0.get_" . $attribute->getName() . "()", last if $attribute->getSPLType() eq "rstring"; }
   SPL::CodeGen::exitln("sorry, no attribute of type 'rstring' found for input port") unless $stdinAttribute;
}

%>


#include <sys/time.h>
#include <time.h>
#include <float.h>
#include <string>

<%SPL::CodeGen::implementationPrologue($model);%>



// calls to SPL functions within expressions are generated with this
// namespace, which must be mapped to the operator's namespace so they
// will invoke the assignment functions defined in the ShellSink_h.cgt file

#define ShellSink MY_OPERATOR

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink constructor ...", "ShellSink");

    // initialize operator state variables
    drained_ = false;
    linecounters.resize(3);
    for (int i=0; i<linecounters.size(); i++) linecounters[i] = 0;

    // store operator parameters
    commandline = <%=$command%>;

    // start the command in a shell
    SPLAPPTRC(L_INFO, "starting shell command '" << commandline << "'", "ShellSink");
    try { shell_.setup(commandline); }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_ERROR, "sorry, could not execute shell command '" << commandline << "', reason='" << shell_.getTermInfoExplanation() << "', exitcode=" << shell_.getTermInfoExitCode(), "ShellSink");
        throw;
    }

    SPLAPPTRC(L_TRACE, "leaving ShellSink constructor ...", "ShellSink");
}


// Destructor
MY_OPERATOR::~MY_OPERATOR()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink destructor ...", "ShellSink");
    SPLAPPTRC(L_TRACE, "leaving ShellSink destructor ...", "ShellSink");
}


// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink allPortsReady() ...", "ShellSink");

    // start a thread for the STDOUT&STDERR read loop below
    createThreads(1);

    SPLAPPTRC(L_TRACE, "leaving ShellSink allPortsReady() ...", "ShellSink");
}


// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown()
{
    SPLAPPTRC(L_TRACE, "entering ShellSink prepareToShutdown() ...", "ShellSink");

    shell_.shutdown(false);

    SPLAPPTRC(L_TRACE, "leaving ShellSink prepareToShutdown() ...", "ShellSink");
}


// Processing for thread that reads STDOUT&STDERR from shell
void MY_OPERATOR::process(uint32_t idx)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << idx << ") ...", "ShellSink");

    // discard lines written by the shell to STDOUT and STDIN
    try {
        com::ibm::streamsx::linuxshell::LinuxShell::LineOutput lineOutput;
        while (!getPE().getShutdownRequested() && !shell_.readLine(lineOutput)) {

            // read and discard lines the shell writes to STDOUT
            if (lineOutput.hasStdoutLine()) {
                stdoutline = lineOutput.getStdoutLine();
                linecounters[1]++;
            }

            // read and discard lines the shell writes to STDERR
            if (lineOutput.hasStderrLine()) {
                stderrline = lineOutput.getStderrLine();
                linecounters[2]++;
            }
        } }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_TRACE, "shell terminated, reason='" << shell_.getTermInfoExplanation() << "', exitcode=" << shell_.getTermInfoExitCode(), "ShellSink");
    }

    {
        AutoMutex am(drainMutex_);
        drainCV_.signal();
        drained_ = true;
    }

    // wait for shell to exit, and get its exit code
    shell_.terminate();
    exitcode = shell_.getTermInfoExitCode();
    exitreason = shell_.getTermInfoExplanation();

    SPLAPPTRC(L_INFO, "finished shell command '" << commandline <<  "', reason='" << exitreason << "', exitcode=" << exitcode, "ShellSink");
    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << idx << ") ...", "ShellSink");
}


// Tuple processing for mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}


// process(tuple) method for operator with an input port,
// executes on upstream operator's thread
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << tuple << "," << port << ") ...", "ShellSink");

    AutoPortMutex apm(mutex_, *this);

    IPort0Type const & iport$0 = static_cast<IPort0Type const &>(tuple);
    SPLAPPTRC(L_TRACE, "received inTuple " << iport$0, "LinuxPipe");

    stdinline = <%=$stdinAttribute%>;
    try { shell_.writeLine(stdinline); }
    catch(com::ibm::streamsx::linuxshell::LinuxShellException const & e) {
        SPLAPPTRC(L_ERROR, "sorry, could not write to stdin: " << e.what(), "LinuxPipe");
        throw;
    }
    linecounters[0]++;

    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << tuple << "," << port << ") ...", "ShellSink");
}


// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    SPLAPPTRC(L_TRACE, "entering ShellSink process(" << punct << "," << port << ") ...", "ShellSink");

    AutoPortMutex apm(mutex_, *this);
    if (punct==Punctuation::FinalMarker) {
        shell_.shutdown(false);
        AutoMutex am(drainMutex_);
        while(!drained_) drainCV_.wait(drainMutex_);
    }

    SPLAPPTRC(L_TRACE, "leaving ShellSink process(" << punct << "," << port << ") ...", "ShellSink");
}



<%SPL::CodeGen::implementationEpilogue($model);%>
