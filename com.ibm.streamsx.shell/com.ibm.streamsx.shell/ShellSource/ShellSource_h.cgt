<%

# Copyright (C) 2016  International Business Machines Corporation
# All Rights Reserved

%>

#include <string>
#include "streamsx.shell/LinuxShell.h"

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
{

public:

  // ----------- standard operator methods ----------

  MY_OPERATOR();
  virtual ~MY_OPERATOR();
  void allPortsReady();
  void prepareToShutdown();
  void process(uint32_t idx);
  void process(Tuple & tuple, uint32_t port);
  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

  // ----------- ShellSource operator methods ----------

  void executeShell(std::string command);

private:

  // ----------- operator parameters (constant after constructor executes) ----------

  double initDelay;
  uint32_t iterationCount;
  double iterationInterval;

  // ----------- operator state variables ----------

  bool drained_;
  SPL::CV drainCV_;
  SPL::Mutex drainMutex_;
  SPL::Mutex mutex_;
  com::ibm::streamsx::linuxshell::LinuxShell shell_;

  // ----------- operator input and output tuples ----------

  <% if ($model->getNumberOfInputPorts()>0) { %> IPort0Type commandTuple; <% } %>
  OPort0Type outputTuple0;
  <% if ($model->getNumberOfOutputPorts()>1) { %> OPort1Type outputTuple1; <% } %>

  // ----------- operator result variables ----------

  SPL::rstring commandline;
  SPL::list<SPL::uint64> linecounters;
  std::string stdoutline;
  std::string stderrline;
  SPL::int32 exitcode;
  SPL::rstring exitreason;

  // ----------- assignment functions for output attributes ----------

  SPL::rstring commandLine() { return commandline; }
  SPL::rstring stdoutLine() { return static_cast<SPL::rstring>(stdoutline); }
  SPL::rstring stderrLine() { return static_cast<SPL::rstring>(stderrline); }
  SPL::list<SPL::uint64> lineCounters() { return linecounters; }
  SPL::int32 exitCode() { return exitcode; }
  SPL::rstring exitReason() { return exitreason; }

};

<%SPL::CodeGen::headerEpilogue($model);%>
