// Copyright (C) 2016  International Business Machines Corporation
// All Rights Reserved


namespace sample;

use com.ibm.streamsx.shell::*;

composite TestShellPipeBasic1 {

    graph


    // create a stream of text lines for the ShellPipe operators below to consume
    stream<rstring textLine> TextStream = FileSource() {
    param
        file: dataDirectory() + "/ozymandias.txt";
        format: line; }
    () as DebugTextStream = FileSink(TextStream) { param file: "debug.TestShellPipeBasic1.TextStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Bash script from a file that consumes STDIN, counts lines, and produces STDOUT
    stream<rstring stdoutLine> A_STDOUTStream = ShellPipe(TextStream) {
    param
        command: "./etc/lineCounter1.sh"; }
    () as DebugA_STDOUTStream = FileSink(A_STDOUTStream) { param file: "debug.TestShellPipeBasic1.A_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Bash script from a file that consumes STDIN, counts lines, and produces STDOUT
    stream<rstring stdoutLine> B_STDOUTStream = ShellPipe(TextStream) {
    param
        command: "./etc/lineCounter1.sh";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine"; }
    () as DebugB_STDOUTStream = FileSink(B_STDOUTStream) { param file: "debug.TestShellPipeBasic1.B_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Perl script from a file that consumes STDIN, counts lines, and produces STDOUT
    stream<rstring stdoutLine> C_STDOUTStream = ShellPipe(TextStream) {
    param
        command: "./etc/lineCounter1.pl"; }
    () as DebugC_STDOUTStream = FileSink(C_STDOUTStream) { param file: "debug.TestShellPipeBasic1.C_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Bash script that consumes STDIN, counts lines, and produces STDOUT
    stream<rstring stdoutLine> D_STDOUTStream = ShellPipe(TextStream) {
    param
        command: "bash -c \"count=0; while read line ; do (( count += 1 )) ; echo \\$count \\${#line} \\$line ; done\"";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine"; }
    () as DebugD_STDOUTStream = FileSink(D_STDOUTStream) { param file: "debug.TestShellPipeBasic1.D_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Perl script that consumes STDIN, counts lines, and produces STDOUT
    stream<rstring stdoutLine> E_STDOUTStream = ShellPipe(TextStream) {
    param
        command: "perl -n -e \"print ++\\$count . ' ' . length(\\$_) . ' ' . \\$_\"";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine"; }
    () as DebugE_STDOUTStream = FileSink(E_STDOUTStream) { param file: "debug.TestShellPipeBasic1.E_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Perl script that consumes STDIN, copies lines, and produces STDOUT
    stream<rstring stdoutLine> F_STDOUTStream as Out = ShellPipe(TextStream) {
    param
        command: "perl -n -e \"print \\$_\"";
    output Out:
        stdoutLine = (rstring)lineCounters()[1] + " " + (rstring)length(stdoutLine()) + " " + stdoutLine(); }
    () as DebugF_STDOUTStream = FileSink(F_STDOUTStream) { param file: "debug.TestShellPipeBasic1.F_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }

}
