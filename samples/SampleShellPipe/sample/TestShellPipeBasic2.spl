// Copyright (C) 2016  International Business Machines Corporation
// All Rights Reserved


namespace sample;

use com.ibm.streamsx.shell::*;

composite TestShellPipeBasic2 {

    graph


    // create a stream of text lines for the ShellPipe operators below to consume
    stream<rstring textLine> TextStream = FileSource() {
    param
        file: dataDirectory() + "/ozymandias.txt";
        format: line; }
    () as DebugTextStream = FileSink(TextStream) { param file: "debug.TestShellPipeBasic2.TextStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Bash script from a file that consumes STDIN, counts lines and characters, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> A_STDOUTStream ;
      stream<rstring stderrLine> A_STDERRStream ) = ShellPipe(TextStream) {
    param
        command: dataDirectory() + "/countlines2.sh"; }
    () as DebugA_STDOUTStream = FileSink(A_STDOUTStream) { param file: "debug.TestShellPipeBasic2.A_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugA_STDERRStream = FileSink(A_STDERRStream) { param file: "debug.TestShellPipeBasic2.A_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Bash script from a file that consumes STDIN, counts lines and characters, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> B_STDOUTStream ;
      stream<rstring stderrLine> B_STDERRStream ) = ShellPipe(TextStream) {
    param
        command: dataDirectory() + "/countlines2.sh";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine";
        stderrAttribute: "stderrLine"; }
    () as DebugB_STDOUTStream = FileSink(B_STDOUTStream) { param file: "debug.TestShellPipeBasic2.B_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugB_STDERRStream = FileSink(B_STDERRStream) { param file: "debug.TestShellPipeBasic2.B_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute a Perl script from a file that consumes STDIN, counts lines and characters, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> C_STDOUTStream ;
      stream<rstring stderrLine> C_STDERRStream ) = ShellPipe(TextStream) {
    param
        command: dataDirectory() + "/countlines2.pl";  }
    () as DebugC_STDOUTStream = FileSink(C_STDOUTStream) { param file: "debug.TestShellPipeBasic2.C_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugC_STDERRStream = FileSink(C_STDERRStream) { param file: "debug.TestShellPipeBasic2.C_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Bash script that consumes STDIN, counts lines and characters, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> D_STDOUTStream ;
      stream<rstring stderrLine> D_STDERRStream ) = ShellPipe(TextStream) {
    param
        command: "bash -c \"count=0; while read line ; do echo \\$count \\${#line} \\$line >&1 ; echo \\$count \\${#line} \\$line >&2 ; (( count += 1 )) ; done\"";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine";
        stderrAttribute: "stderrLine"; }
    () as DebugD_STDOUTStream = FileSink(D_STDOUTStream) { param file: "debug.TestShellPipeBasic2.D_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugD_STDERRStream = FileSink(D_STDERRStream) { param file: "debug.TestShellPipeBasic2.D_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Perl script that consumes STDIN, counts lines and characters, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> E_STDOUTStream ;
      stream<rstring stderrLine> E_STDERRStream ) = ShellPipe(TextStream) {
    param
        command: "perl -n -e \"print STDOUT \\$count . ' ' . length . ' ' . \\$_; print STDERR \\$count++ . ' ' . length . ' ' . \\$_\"; ";
        stdinAttribute: textLine;
        stdoutAttribute: "stdoutLine";
        stderrAttribute: "stderrLine"; }
    () as DebugE_STDOUTStream = FileSink(E_STDOUTStream) { param file: "debug.TestShellPipeBasic2.E_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugE_STDERRStream = FileSink(E_STDERRStream) { param file: "debug.TestShellPipeBasic2.E_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }


    // execute an inline Perl script that consumes STDIN, copies lines, and produces STDOUT and STDERR
    ( stream<rstring stdoutLine> F_STDOUTStream as Out1 ;
      stream<rstring stderrLine> F_STDERRStream as Out2 ) = ShellPipe(TextStream) {
    param
        command: "perl -n -e \"print STDOUT \\$_; print STDERR \\$_\"; ";
    output
    Out1:
        stdoutLine = (rstring)lineCounters()[1] + " " + (rstring)length(stdoutLine()) + " " + stdoutLine();
    Out2:
        stderrLine = (rstring)lineCounters()[2] + " " + (rstring)length(stderrLine()) + " " + stderrLine(); }
    () as DebugF_STDOUTStream = FileSink(F_STDOUTStream) { param file: "debug.TestShellPipeBasic2.F_STDOUTStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }
    () as DebugF_STDERRStream = FileSink(F_STDERRStream) { param file: "debug.TestShellPipeBasic2.F_STDERRStream.out"; format: txt; hasDelayField: true; flush: 1u; writePunctuations: true; }

}
